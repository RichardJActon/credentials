% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git-credential.R
\name{git_cmd}
\alias{git_cmd}
\alias{credential_fill}
\alias{credential_approve}
\alias{credential_reject}
\title{Retrieve and store git HTTPS credentials}
\usage{
credential_fill(cred, git = "git", verbose = TRUE)

credential_approve(cred, git = "git", verbose = TRUE)

credential_reject(cred, git = "git", verbose = TRUE)
}
\arguments{
\item{cred}{named list with at least fields \code{protocol} and \code{host} and
optionally also \code{path}, \code{username} ,\code{password}.}

\item{git}{name or path to your git executable}

\item{verbose}{emit some useful output about what is happening}
}
\description{
These are low-level wrappers for the \href{https://git-scm.com/docs/git-credential}{git-credential}
command line tool. Try the more user-friendly \link{read_http_credential}
and \link{update_http_credential} functions first.
}
\details{
The \link{credential_fill} function either looks up credentials, and if none exists
it will attempt to prompt the user for a username/password. The method for
storing and prompting depends on your OS and R frontend. Upon success it
returns a named list with the same \code{protocol} and \code{host} fields as the
\code{cred} input, and possibly added \code{username} and \code{password} fields.

You are then supposed to try and authenticate with these credentials using
your client, and afterwards report back if the credentials were valid or not.
You should call \link{credential_approve} and \link{credential_reject} using the \code{cred}
that was returned by \link{credential_fill} in order to validate or invalidate a
credential from the store.
}
\examples{
\donttest{
# Insert example cred
example <- list(protocol = "https", host = "example.com",
  username = "test", password = "secret")
credential_approve(example)

# Retrieve it from the store
cred <- credential_fill(list(protocol = "https", host = "example.com", path = "/foo"))
print(cred)

# Delete it
credential_reject(cred)
}
}
